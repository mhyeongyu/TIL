# -*- coding: utf-8 -*-
"""Pytorch_Tutorial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1enQrU5TGe-jvN4elU_-HDjRer8gZGB5d

## 텐서(Tensor)
"""

import torch
import numpy as np
import warnings
warnings.filterwarnings('ignore')

data = [[1, 2], [3, 4]]
x_data = torch.tensor(data)
x_data

np_array = np.array(data)
x_np = torch.from_numpy(np_array)
print(x_np)

x_tensor = np.array(x_np)
print(x_tensor)

x_ones = torch.ones_like(x_data)
print(x_ones)

x_rand = torch.rand_like(x_data, dtype=torch.float)
print(x_rand)

shape = (2, 3, )
rand_tensor = torch.rand(shape)
ones_tensor = torch.ones(shape)
zeros_tensor = torch.zeros(shape)

print(rand_tensor)
print(ones_tensor)
print(zeros_tensor)

tensor = torch.rand(3, 4)

print(tensor.shape)
print(tensor.dtype)
print(tensor.device)
print(tensor)

if torch.cuda.is_available():
  tensor = tensor.to('cuda')

tensor = torch.ones(4, 4)
print('First row:', tensor[0])
print('First col:', tensor[:, 0])
print('Last col:', tensor[..., -1], '\n')

tensor[:, 1] = 0
print(tensor)

t1 = torch.cat([tensor, tensor, tensor], dim=1)
print(t1)

y1 = tensor @ tensor.T
y2 = tensor.matmul(tensor.T)
y3 = torch.rand_like(tensor)

torch.matmul(tensor, tensor.T, out=y3)

z1 = tensor * tensor
z2 = tensor.mul(tensor)
z3 = torch.rand_like(tensor)

torch

"""## Dataset과 DataLoader"""

import torch
from torch.utils.data import Dataset
from torchvision import datasets
from torchvision.transforms import ToTensor, Lambda
import matplotlib.pyplot as plt

training_data = datasets.FashionMNIST(
    root='data',
    train=True,
    download=True,
    transform=ToTensor()
)

test_data = datasets.FashionMNIST(
    root='data',
    train=False,
    download=True,
    transform=ToTensor()
)

labels_map = {
    0: "T-Shirt",
    1: "Trouser",
    2: "Pullover",
    3: "Dress",
    4: "Coat",
    5: "Sandal",
    6: "Shirt",
    7: "Sneaker",
    8: "Bag",
    9: "Ankle Boot",
}

figure = plt.figure(figsize=(8,6))
cols, rows = 3, 3

for i in range(1, cols*rows + 1):
  sample_idx = torch.randint(len(training_data), size=(1,)).item()
  img, label = training_data[sample_idx]
  figure.add_subplot(rows, cols, i)
  plt.title(labels_map[label])
  plt.axis('off')
  plt.imshow(img.squeeze(), cmap='gray')
plt.show()

import os
import pandas as pd
from torchvision.io import read_image

class CustomImageDataset(Dataset):
  def __init__(self, annotations_file, img_dir, transform=None, target_transform=None):
    self.img_labels = pd.read_csv(annotations_file)
    self.img_dir = img_dir
    self.transform = transform
    self.target_transform = target_transform

  def __len__(self):
    return len(self.img_labels)

  def __getitem__(self, idx):
    img_path = os.path.join(self.img_dir, self.img_labels.iloc[idx, 0])
    image = read_image(img_path)
    label = self.img_labels.iloc[idx, 1]
    if self.transform:
      image = self.transform(image)
    if self.target.transform:
      label = self.target_transform(label)
    sample = {'image':image, 'label':label}
    return sample

from torch.utils.data import DataLoader

train_dataloader = DataLoader(training_data, batch_size=64, shuffle=True)
test_dataloader = DataLoader(test_data, batch_size=64, shuffle=True)

train_features, train_labels = next(iter(train_dataloader))
print('Feature batch shape: {}'.format(train_features.size()))
print('Labels batch shape: {}'.format(train_labels.size()))

img = train_features[0].squeeze()
label = train_labels[0]
plt.imshow(img, cmap='gray')
plt.show()
print('Label: {}'.format(label))

"""## 변형(Transform)"""

import torch
from torchvision import datasets
from torchvision.transforms import ToTensor, Lambda

ds = datasets.FashionMNIST(
    root='data',
    train=True,
    download=True,
    transform=ToTensor(),    #tensor형태로 변환하고, 값을 [0,1]범위로 scaling
    target_transform=Lambda(lambda y: 
                            torch.zeros(10, dtype=torch.float).scatter_(0, torch.tensor(y), value=1))
)

ds[0]

target_transform = Lambda(lambda y: torch.zeros(
    10, dtype=torch.float).scatter_(dim=0, index=torch.tensor(y), value=1))

"""## 신경망 모델 구성하기"""

import os
import torch
from torch import nn
from torch.utils.data import DataLoader
from torchvision import datasets, transforms

class NeuralNetwork(nn.Module):
  def __init__(self):
    super(NeuralNetwork, self).__init__()
    self.flatten = nn.Flatten()
    self.linear_relu_stack = nn.Sequential(
        nn.Linear(28*28, 512),
        nn.ReLU(),
        nn.Linear(512, 512),
        nn.ReLU(),
        nn.Linear(512, 10),
        nn.ReLU()
    )

  def forward(self, x):
    x = self.flatten(x)
    logits = self.linear_relu_stack(x)
    return logits

model = NeuralNetwork()
print(model)

X = torch.rand(1, 28, 28)
logits = model(X)
pred_probab = nn.Softmax(dim=1)(logits)
y_pred = pred_probab.argmax(1)

y_pred

input_image = torch.rand(3, 28, 28)
print('image_size: {}'.format(input_image.size()))

flatten = nn.Flatten()
flat_image = flatten(input_image)
print('flaten_size: {}'.format(flat_image.size()))

layer1 = nn.Linear(in_features=28*28, out_features=20)
hidden1 = layer1(flat_image)
print(hidden1.size())

print('Before ReLU: {}'.format(hidden1))
hidden1 = nn.ReLU()(hidden1)
print('After ReLU: {}'.format(hidden1))  #음수 가중치를 0으로 변환

seq_modules = nn.Sequential(
    flatten,
    layer1,
    nn.ReLU(),
    nn.Linear(20, 10)
)

input_image = torch.rand(3, 28, 28)
logits = seq_modules(input_image)

print(seq_modules)
print('Logit Shape: {}'.format(logits.shape))

softmax = nn.Softmax(dim=1)
pred_probab = softmax(logits)

print(softmax)
print(pred_probab)

print('Model Structure: {}'.format(model))

for name, param in model.named_parameters():
  print('''
        ====================================================
        Layer: {0}, 
        Size: {1}, 
        Values: 
        {2}'''.format(name, param.size(), param[:2].shape))

"""## Autograd"""

import torch

x = torch.ones(5)
y = torch.zeros(3)
w = torch.randn(5, 3, requires_grad=True)
b = torch.randn(3, requires_grad=True)
z = torch.matmul(x, w) + b
loss = torch.nn.functional.binary_cross_entropy_with_logits(z, y)

print('Gradient function z: {}'.format(z.grad_fn))
print('Gradient function loss: {}'.format(loss.grad_fn))

loss.backward()
print(w.grad)
print(b.grad)

#순전파 연산만 필요한 경우, no_grad()로 연산 추적을 멈춘다

z = torch.matmul(x, w) + b
print(z.requires_grad)

with torch.no_grad():
  z = torch.matmul(x, w) + b
print(z.requires_grad)

#datach(), no_grad()와 같은 옵션

z = torch.matmul(x, w) + b
z_det = z.detach()
print(z_det.requires_grad)

inp = torch.eye(5, requires_grad=True)
out = (inp + 1).pow(2)

out.backward(torch.ones_like(inp), retain_graph=True)
print('First call\n{}'.format(inp.grad))

out.backward(torch.ones_like(inp), retain_graph=True)
print('\nSecond call\n{}'.format(inp.grad))

inp.grad.zero_()
out.backward(torch.ones_like(inp), retain_graph=True)
print('\nCall after zeroing gradients\n{}'.format(inp.grad))

"""## 최적화(Optimization)"""

import torch
from torch import nn
from torch.utils.data import DataLoader
from torchvision import datasets
from torchvision.transforms import ToTensor, Lambda

training_data = datasets.FashionMNIST(
    root='data',
    train=True,
    download=True,
    transform=ToTensor()
)

test_data = datasets.FashionMNIST(
    root='data',
    train=False,
    download=True,
    transform=ToTensor()
)

train_dataloader = DataLoader(training_data, batch_size=64)
test_dataloader = DataLoader(test_data, batch_size=64)

class NeuralNetwork(nn.Module):
  def __init__(self):
    super(NeuralNetwork, self).__init__()
    self.flatten = nn.Flatten()
    self.linear_relu_stack = nn.Sequential(
        nn.Linear(28*28, 512),
        nn.ReLU(),
        nn.Linear(512, 512),
        nn.ReLU(),
        nn.Linear(512, 10),
        nn.ReLU()
    )
  
  def forward(self, x):
    x = self.flatten(x)
    logits = self.linear_relu_stack(x)
    return logits

model = NeuralNetwork()
print(model)

learning_rate = 1e-3
batch_size = 64
epochs = 5

loss_fn = nn.CrossEntropyLoss()
optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)

def train_loop(dataloader, model, loss_fn, optimizer):
  size = len(dataloader.dataset)
  for batch, (X, y) in enumerate(dataloader):
    pred = model(X)
    loss = loss_fn(pred, y)

    optimizer.zero_grad()
    loss.backward()
    optimizer.step()

    if batch % 100 == 0:
      loss, current = loss.item(), batch * len(X)
      print('loss: {0:.4f}, [{1}/{2}]'.format(loss, current, size))

def test_loop(dataloader, model, loss_fn):
  size = len(dataloader.dataset)
  test_loss, correct = 0, 0

  with torch.no_grad():
    for X, y in dataloader:
      pred = model(X)
      test_loss += loss_fn(pred, y).item()
      correct += (pred.argmax(1) == y).type(torch.float).sum().item()
  
  test_loss /= size
  correct /= size
  print('Test Error: \n Accuracy: {0:.4f}  Avg loss: {1:.4f}'.format(correct, test_loss))

loss_fn = nn.CrossEntropyLoss()
optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)
epochs = 10

for t in range(epochs):
  print('\nEpochs {} \n ==========================='.format(t+1))
  train_loop(train_dataloader, model, loss_fn, optimizer)
  test_loop(test_dataloader, model, loss_fn)

"""## 모델 저장하고 불러오기"""

import torch
import torch.onnx as onnx
import torchvision.models as models

#모델저장

model = models.vgg16(pretrained=True)
torch.save(model.state_dict(), 'model_weights.pth')
print(model)

#모델 가중치를 불러오기 위해 동일한 인스턴스 생성 후 모델로드

model = models.vgg16()
model.load_state_dict(torch.load('model_weights.pth'))
model.eval()

torch.save(model, 'model.pth')
model = torch.load('model.pth')

input_image = torch.zeros((1, 3, 224, 224))
onnx.export(model, input_image, 'model.onnx')
onnx



